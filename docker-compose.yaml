services:

  nginx:
    image: nginx:1.23-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./public:/var/www/public
      - ./config/nginx.localhost:/etc/nginx/conf.d #раскомментируйте эту строку, если certbot генерирует сертификат в первый раз, и запустите ./init-letsencrypt.sh
      #- ./config/nginx:/etc/nginx/conf.d #раскомментируйте эту строку после того, как certbot сгенерирует сертификат, и закомментируйте строку выше.З атем run docker-compose up/docker-compose up -d
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf/:/etc/letsencrypt
      - ./certbot/logs/:/var/log/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - nginx
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  php:
    build:
      context: .
      dockerfile: ./config/php/Dockerfile
    volumes:
      - .:/var/www
      - ./logs:/var/www/logs 
    working_dir: /var/www
    restart: unless-stopped
    ports:
      - "9000:9000"

  mysql:
    image: mysql:8
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_DATABASE=telegram_bot
    volumes:
      - "./storage/mysql:/var/lib/mysql"
      - "./config/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro"


volumes:
  mysql_data: { driver: local }
